/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI838860872 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI838860879 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI469762060 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
NTI469762060.base = NTI33554466;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI838860879 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI838860872, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI838860879.node = NNI838860879;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}
var ConstSet8 = setConstr([65, 90], [97, 122]);

function nimCharToStr(x_33556517) {
  var result_33556518 = [];

    result_33556518 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556518[0] = x_33556517;

  return result_33556518;

}

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1023410338 = [0];

function newSeq_469762060(len_469762062) {
  var result_469762063 = [];

    result_469762063 = new Array(len_469762062); for (var i = 0 ; i < len_469762062 ; ++i) { result_469762063[i] = false; }
  return result_469762063;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_469762114 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762114 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_469762114;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_469762114 = addInt(i_469762114, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function toInt_33556007(f_33556008) {
    var Temporary1;

  var result_33556009 = 0;

    if ((0.0 <= f_33556008)) {
    Temporary1 = (((f_33556008 + 0.5)) | 0);
    }
    else {
    Temporary1 = (((f_33556008 - 0.5)) | 0);
    }
    
    result_33556009 = Temporary1;

  return result_33556009;

}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function get_primes_469762053(limit_469762054) {
  var result_469762055 = [];

    var is_prime_469762077 = newSeq_469762060(chckRange(addInt(limit_469762054, 1), 0, 2147483647));
    Label1: do {
      var n_469762082 = 0;
      var res_469762097 = 2;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762097 <= limit_469762054)) break Label3;
            n_469762082 = res_469762097;
            is_prime_469762077[chckIndx(n_469762082, 0, (is_prime_469762077).length - 1)] = true;
            res_469762097 = addInt(res_469762097, 1);
          }
      } while (false);
    } while (false);
    var sqrt_limit_469762083 = addInt(toInt_33556007(Math.sqrt(toFloat_33556001(limit_469762054))), 2);
    Label4: do {
      var n_469762088 = 0;
      var res_469762106 = 0;
      Label5: do {
          Label6: while (true) {
          if (!(res_469762106 <= sqrt_limit_469762083)) break Label6;
            n_469762088 = res_469762106;
            if (is_prime_469762077[chckIndx(n_469762088, 0, (is_prime_469762077).length - 1)]) {
            Label7: do {
              var i_469762094 = 0;
              var colontmp__469762101 = 0;
              var colontmp__469762102 = 0;
              colontmp__469762101 = mulInt(n_469762088, n_469762088);
              colontmp__469762102 = chckRange(n_469762088, 1, 2147483647);
              var res_469762104 = colontmp__469762101;
              Label8: do {
                  Label9: while (true) {
                  if (!(res_469762104 <= limit_469762054)) break Label9;
                    i_469762094 = res_469762104;
                    is_prime_469762077[chckIndx(i_469762094, 0, (is_prime_469762077).length - 1)] = false;
                    res_469762104 = addInt(res_469762104, colontmp__469762102);
                  }
              } while (false);
            } while (false);
            }
            
            res_469762106 = addInt(res_469762106, 1);
          }
      } while (false);
    } while (false);
    result_469762055 = nimCopy(null, is_prime_469762077, NTI469762060);

  return result_469762055;

}
var is_prime_469762095 = get_primes_469762053(1000000);

function check_goldbach_conjecture_469762116(num_469762117) {
              var Temporary4;

  var result_469762118 = false;

  BeforeRet: do {
    Label1: do {
      var i_469762123 = 0;
      var colontmp__469762193 = 0;
      colontmp__469762193 = toInt_33556007(Math.sqrt(toFloat_33556001(num_469762117)));
      var res_469762194 = 1;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762194 <= colontmp__469762193)) break Label3;
            i_469762123 = res_469762194;
            var left_469762124 = subInt(num_469762117, mulInt(mulInt(2, i_469762123), i_469762123));
              if (!(0 < left_469762124)) Temporary4 = false; else {                Temporary4 = is_prime_469762095[chckIndx(left_469762124, 0, (is_prime_469762095).length - 1)];              }            if (Temporary4) {
            result_469762118 = false;
            break BeforeRet;
            }
            
            res_469762194 = addInt(res_469762194, 1);
          }
      } while (false);
    } while (false);
    result_469762118 = true;
    break BeforeRet;
  } while (false);

  return result_469762118;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function parseSaturatedNatural_620757326(s_620757327, b_620757328, b_620757328_Idx, start_620757329) {
      var Temporary1;
          var Temporary4;

  var result_620757330 = 0;

    var i_620757331 = start_620757329;
    if (((i_620757331 < (s_620757327).length) && (s_620757327[chckIndx(i_620757331, 0, (s_620757327).length - 1)] == 43))) {
    i_620757331 = addInt(i_620757331, 1);
    }
    
      if (!(i_620757331 < (s_620757327).length)) Temporary1 = false; else {        Temporary1 = (ConstSet6[s_620757327[chckIndx(i_620757331, 0, (s_620757327).length - 1)]] != undefined);      }    if (Temporary1) {
    b_620757328[b_620757328_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_620757331 < (s_620757327).length)) Temporary4 = false; else {            Temporary4 = (ConstSet7[s_620757327[chckIndx(i_620757331, 0, (s_620757327).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_620757350 = subInt(s_620757327[chckIndx(i_620757331, 0, (s_620757327).length - 1)], 48);
          if ((b_620757328[b_620757328_Idx] <= divInt(subInt(2147483647, c_620757350), 10))) {
          b_620757328[b_620757328_Idx] = addInt(mulInt(b_620757328[b_620757328_Idx], 10), c_620757350);
          }
          else {
            b_620757328[b_620757328_Idx] = 2147483647;
          }
          
          i_620757331 = addInt(i_620757331, 1);
          Label5: do {
              Label6: while (true) {
              if (!((i_620757331 < (s_620757327).length) && (s_620757327[chckIndx(i_620757331, 0, (s_620757327).length - 1)] == 95))) break Label6;
                i_620757331 = addInt(i_620757331, 1);
              }
          } while (false);
        }
    } while (false);
    result_620757330 = subInt(i_620757331, start_620757329);
    }
    

  return result_620757330;

}

function HEX5BHEX5D_905972890(s_905972893, x_905972894) {
  var result_905972895 = [];

    var a_905972897 = x_905972894.a;
    var L_905972899 = addInt(subInt(subInt((s_905972893).length, x_905972894.b), a_905972897), 1);
    result_905972895 = nimCopy(null, mnewString(chckRange(L_905972899, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_905972904 = 0;
      var i_469762199 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_469762199 < L_905972899)) break Label3;
            i_905972904 = i_469762199;
            result_905972895[chckIndx(i_905972904, 0, (result_905972895).length - 1)] = s_905972893[chckIndx(addInt(i_905972904, a_905972897), 0, (s_905972893).length - 1)];
            i_469762199 = addInt(i_469762199, 1);
          }
      } while (false);
    } while (false);

  return result_905972895;

}

function HEX2EHEX2E_838860880(a_838860883, b_838860884) {
  var result_838860887 = ({a: 0, b: 0});

    result_838860887 = nimCopy(result_838860887, {a: a_838860883, b: b_838860884}, NTI838860879);

  return result_838860887;

}

function parseStandardFormatSpecifier_973078586(s_973078587, start_973078588, ignoreUnknownSuffix_973078589) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_973078590 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_973078590.fill = 32;
    result_973078590.align = 0;
    result_973078590.sign = 45;
    var i_973078592 = start_973078588;
    if (((addInt(i_973078592, 1) < (s_973078587).length) && (ConstSet2[s_973078587[chckIndx(addInt(i_973078592, 1), 0, (s_973078587).length - 1)]] != undefined))) {
    result_973078590.fill = s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)];
    result_973078590.align = s_973078587[chckIndx(addInt(i_973078592, 1), 0, (s_973078587).length - 1)];
    i_973078592 = addInt(i_973078592, 2);
    }
    else {
    if (((i_973078592 < (s_973078587).length) && (ConstSet3[s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)]] != undefined))) {
    result_973078590.align = s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)];
    i_973078592 = addInt(i_973078592, 1);
    }
    }
    if (((i_973078592 < (s_973078587).length) && (ConstSet4[s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)]] != undefined))) {
    result_973078590.sign = s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)];
    i_973078592 = addInt(i_973078592, 1);
    }
    
    if (((i_973078592 < (s_973078587).length) && (s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)] == 35))) {
    result_973078590.alternateForm = true;
    i_973078592 = addInt(i_973078592, 1);
    }
    
      if (!((addInt(i_973078592, 1) < (s_973078587).length) && (s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet5[s_973078587[chckIndx(addInt(i_973078592, 1), 0, (s_973078587).length - 1)]] != undefined);      }    if (Temporary1) {
    result_973078590.padWithZero = true;
    i_973078592 = addInt(i_973078592, 1);
    }
    
    var parsedLength_973078629 = parseSaturatedNatural_620757326(s_973078587, result_973078590, "minimumWidth", i_973078592);
    i_973078592 = addInt(i_973078592, parsedLength_973078629);
    if (((i_973078592 < (s_973078587).length) && (s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)] == 46))) {
    i_973078592 = addInt(i_973078592, 1);
    var parsedLengthB_973078638 = parseSaturatedNatural_620757326(s_973078587, result_973078590, "precision", i_973078592);
    i_973078592 = addInt(i_973078592, parsedLengthB_973078638);
    }
    else {
      result_973078590.precision = -1;
    }
    
      if (!(i_973078592 < (s_973078587).length)) Temporary2 = false; else {        Temporary2 = (ConstSet8[s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)]] != undefined);      }    if (Temporary2) {
    result_973078590.typ = s_973078587[chckIndx(i_973078592, 0, (s_973078587).length - 1)];
    i_973078592 = addInt(i_973078592, 1);
    }
    
    result_973078590.endPosition = i_973078592;
      if (!!((i_973078592 == (s_973078587).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_973078589);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_905972890(s_973078587, HEX2EHEX2E_838860880(i_973078592, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_973078590;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function mkDigit_973078533(v_973078534, typ_973078535) {
      var Temporary1;

  var result_973078536 = [];

    if (!((v_973078534 < 26))) {
    failedAssertImpl_218103864(makeNimstrLit("strformat.nim(320, 9) `v < 26` "));
    }
    
    if ((v_973078534 < 10)) {
    result_973078536 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_973078534), 0, 255)), NTI33554439);
    }
    else {
      if ((typ_973078535 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_973078536 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_973078534), 10), 0, 255)), NTI33554439);
    }
    

  return result_973078536;

}

function nsuRepeatChar(c_603980795, count_603980796) {
  var result_603980797 = [];

    result_603980797 = nimCopy(null, mnewString(count_603980796), NTI33554439);
    Label1: do {
      var i_603980802 = 0;
      var colontmp__469762211 = 0;
      colontmp__469762211 = subInt(count_603980796, 1);
      var res_469762212 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_469762212 <= colontmp__469762211)) break Label3;
            i_603980802 = res_469762212;
            result_603980797[chckIndx(i_603980802, 0, (result_603980797).length - 1)] = c_603980795;
            res_469762212 = addInt(res_469762212, 1);
          }
      } while (false);
    } while (false);

  return result_603980797;

}

function formatInt_469762155(n_469762157, radix_469762158, spec_469762159) {
    var Temporary1;
    var Temporary8;

  var result_469762160 = [];

    var n_469762163 = n_469762157;
    var negative_469762164 = (n_469762163 < 0);
    if (negative_469762164) {
    Temporary1 = ((~(n_469762163) + 1) );
    }
    else {
    Temporary1 = n_469762163;
    }
    
    var v_469762165 = Temporary1;
    var xx_469762166 = [];
    if (spec_469762159.alternateForm) {
    switch (spec_469762159.typ) {
    case 88:
      xx_469762166 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_469762166 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_469762166 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_469762166 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_469762165 == 0)) {
    result_469762160 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_469762160 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_469762165)) break Label3;
            var d_469762167 = (v_469762165 % radix_469762158);
            v_469762165 = Math.trunc(((v_469762165 / radix_469762158) ));
            result_469762160.push.apply(result_469762160, mkDigit_973078533(chckRange(d_469762167, -2147483648, 2147483647), spec_469762159.typ));;
          }
      } while (false);
      Label4: do {
        var idx_469762172 = 0;
        var colontmp__469762203 = 0;
        colontmp__469762203 = divInt((result_469762160).length, 2);
        var i_469762204 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_469762204 < colontmp__469762203)) break Label6;
              idx_469762172 = i_469762204;
              var Temporary7 = result_469762160[chckIndx(idx_469762172, 0, (result_469762160).length - 1)]; result_469762160[chckIndx(idx_469762172, 0, (result_469762160).length - 1)] = result_469762160[chckIndx(subInt(subInt((result_469762160).length, idx_469762172), 1), 0, (result_469762160).length - 1)]; result_469762160[chckIndx(subInt(subInt((result_469762160).length, idx_469762172), 1), 0, (result_469762160).length - 1)] = Temporary7;              i_469762204 = addInt(i_469762204, 1);
            }
        } while (false);
      } while (false);
    }
    
    if (spec_469762159.padWithZero) {
    if (negative_469762164) Temporary8 = true; else {      Temporary8 = !((spec_469762159.sign == 45));    }    var sign_469762177 = Temporary8;
    var toFill_469762181 = subInt(subInt(subInt(spec_469762159.minimumWidth, (result_469762160).length), (xx_469762166).length), (sign_469762177 ? 1 : 0));
    if ((0 < toFill_469762181)) {
    result_469762160 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_469762181, 0, 2147483647)) || []).concat(result_469762160 || []), NTI33554439);
    }
    
    }
    
    if (negative_469762164) {
    result_469762160 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_469762166 || [],result_469762160 || []), NTI33554439);
    }
    else {
    if (!((spec_469762159.sign == 45))) {
    result_469762160 = nimCopy(null, [spec_469762159.sign].concat(xx_469762166 || [],result_469762160 || []), NTI33554439);
    }
    else {
      result_469762160 = nimCopy(null, (xx_469762166 || []).concat(result_469762160 || []), NTI33554439);
    }
    }
    if ((spec_469762159.align == 60)) {
    Label9: do {
      var i_469762186 = 0;
      var colontmp__469762207 = 0;
      colontmp__469762207 = (result_469762160).length;
      var i_469762208 = colontmp__469762207;
      Label10: do {
          Label11: while (true) {
          if (!(i_469762208 < spec_469762159.minimumWidth)) break Label11;
            i_469762186 = i_469762208;
            addChar(result_469762160, spec_469762159.fill);;
            i_469762208 = addInt(i_469762208, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_469762187 = subInt(spec_469762159.minimumWidth, (result_469762160).length);
      if ((spec_469762159.align == 94)) {
      var half_469762188 = divInt(toFill_469762187, 2);
      result_469762160 = nimCopy(null, (nsuRepeatChar(spec_469762159.fill, chckRange(half_469762188, 0, 2147483647)) || []).concat(result_469762160 || [],nsuRepeatChar(spec_469762159.fill, chckRange(subInt(toFill_469762187, half_469762188), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_469762187)) {
        result_469762160 = nimCopy(null, (nsuRepeatChar(spec_469762159.fill, chckRange(toFill_469762187, 0, 2147483647)) || []).concat(result_469762160 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_469762160;

}

function formatValue_469762147(result_469762149, result_469762149_Idx, value_469762150, specifier_469762151) {
  BeforeRet: do {
    if (((specifier_469762151).length == 0)) {
    result_469762149[result_469762149_Idx].push.apply(result_469762149[result_469762149_Idx], HEX24_335544323(value_469762150));;
    break BeforeRet;
    }
    
    var spec_469762152 = parseStandardFormatSpecifier_973078586(specifier_469762151, 0, false);
    var radix_469762153 = 10;
    switch (spec_469762152.typ) {
    case 120:
    case 88:
      radix_469762153 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_469762153 = 2;
      break;
    case 111:
      radix_469762153 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_469762152.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_469762149[result_469762149_Idx].push.apply(result_469762149[result_469762149_Idx], formatInt_469762155(value_469762150, radix_469762153, spec_469762152));;
  } while (false);

  
}
var found_469762125 = [false];
var limit_469762126 = 1000000;
Label2: do {
  var n_469762132 = [0];
  var res_469762190 = 9;
  Label3: do {
      Label4: while (true) {
      if (!(res_469762190 <= limit_469762126)) break Label4;
        n_469762132[0] = res_469762190;
        if (!(is_prime_469762095[chckIndx(n_469762132[0], 0, (is_prime_469762095).length - 1)])) {
        if (check_goldbach_conjecture_469762116(n_469762132[0])) {
        var fmtRes_469762141 = [mnewString(0)];
        formatValue_469762147(fmtRes_469762141, 0, n_469762132[0], []);
        rawEcho(fmtRes_469762141[0]);
        found_469762125[0] = true;
        break Label2;
        }
        
        }
        
        res_469762190 = addInt(res_469762190, 2);
      }
  } while (false);
} while (false);
if (!(found_469762125[0])) {
rawEcho(makeNimstrLit("not found"));
}

